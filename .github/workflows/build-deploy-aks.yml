name: Build Containers

on: 
  push: 
    branches: [master]
  pull_request:
    branches: [master]

# Note. Required secrets: dockerPassword, acrPassword

env:
  dockerUser: bencuk
  acrName: bcdemo
  imageName: nodejs-demoapp
  host: nodejs-demoapp.kube.benco.io
  
jobs:
  buildJob:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
      
    - name: Set imageTag variable
      run: |
        echo "echo \"::set-env name=imageTag::$(date +%Y%m%d.%H%M)\"" > vars.sh
        source ./vars.sh
      
    - name: Build the Docker image
      run: docker build . --file ./Dockerfile --tag $dockerUser/$imageName:latest --tag $acrName.azurecr.io/apps/$imageName:$imageTag --tag $acrName.azurecr.io/apps/$imageName:latest
    
    - name: Dockerhub Login
      uses: Azure/docker-login@v1
      with:
        username: ${{ env.dockerUser }}
        password: ${{ secrets.dockerPassword }} 

    - name: Push to Dockerhub
      run: docker push $dockerUser/$imageName
      
    - name: ACR Login
      uses: Azure/docker-login@v1
      with:
        login-server: ${{ env.acrName }}.azurecr.io
        username: ${{ env.acrName }}
        password: ${{ secrets.acrPassword }}   
            
    - name: Push to ACR
      run: docker push $acrName.azurecr.io/apps/$imageName

    - name: Upload vars artifact
      uses: actions/upload-artifact@v1
      with:
        name: vars
        path: ./vars.sh

    - name: create deployment
      uses: niklasmerz/github-deployment-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: -o benc-uk -r nodejs-demoapp -c master -e demo -i 2
    
  releaseJob:
    needs: buildJob
    env:
      KUBECONFIG_FILE: '${{ secrets.kubeConfig }}'

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1

    - name: Download vars artifact
      uses: actions/download-artifact@v1
      with:
        name: vars

    - name: Set vars
      run: source vars/vars.sh

    - name: ACR Login
      uses: Azure/docker-login@v1
      with:
        login-server: ${{ env.acrName }}.azurecr.io
        username: ${{ env.acrName }}
        password: ${{ secrets.acrPassword }}  

    - name: Helm install MongoDB
      uses: 'deliverybot/helm@v1'
      with:
        helm: 'helm3'
        release: 'db'
        namespace: 'demoapps'
        chart: 'https://kubernetes-charts.storage.googleapis.com/mongodb-7.4.6.tgz'
        value-files: './kubernetes/db.yaml'

    - name: Helm install Nodejs-Demoapp
      uses: 'deliverybot/helm@v1'
      with:
        helm: 'helm3'
        release: 'nodejs'
        namespace: 'demoapps'
        chart: 'https://code.benco.io/helm-charts/webapp-1.0.0.tgz'
        value-files: './kubernetes/app.yaml'
        values: |
          image:
            tag: '${{ env.imageTag }}'
            repository: '${{ env.acrName }}.azurecr.io/apps/${{ env.imageName }}'

          env: 
            TODO_MONGO_CONNSTR: mongodb://db-mongodb
            WEATHER_API_KEY: ${{ secrets.weatherKey }}
            APPINSIGHTS_INSTRUMENTATIONKEY: ${{ secrets.appInsightsKey }}
            AAD_APP_ID: 79a5ae6e-58ea-4114-8c42-1fd260b9549c
            AAD_APP_SECRET: ${{ secrets.aadAppSecret }}
            AAD_REDIRECT_URL_BASE: https://${{ env.host }}

          ingress:
            enabled: true
            annotations:
              kubernetes.io/ingress.class: addon-http-application-routing
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
            host: ${{ env.host }}
            tls: 
              enabled: true
              secretName: kube-benco-io-cert
